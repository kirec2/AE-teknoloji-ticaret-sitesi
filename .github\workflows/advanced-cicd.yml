name: Advanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REDIS_HOST: localhost
  REDIS_PORT: 6379

jobs:
  # Lint ve Code Quality
  lint-and-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Run ESLint
      run: npm run lint
      working-directory: ./backend
    
    - name: Check code formatting
      run: npx prettier --check .
      working-directory: ./backend

  # Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: lint-and-quality
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Run unit tests
      run: npm run test:coverage
      working-directory: ./backend
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Integration Tests
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
      redis:
        image: redis:alpine
        ports:
          - 6379:6379
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Run integration tests
      run: npm run test:integration
      working-directory: ./backend
      env:
        MONGODB_URI: mongodb://localhost:27017/test
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
      working-directory: ./backend
    
    - name: Run security audit
      run: npm audit --audit-level=moderate
      working-directory: ./backend
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        working-directory: ./backend

  # Build and Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci --only=production
      working-directory: ./backend
    
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/aeteknoloji-staging
          git pull origin develop
          npm ci --only=production
          pm2 restart aeteknoloji-staging
          echo "Staging deployment completed"

  # Build and Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install dependencies
      run: npm ci --only=production
      working-directory: ./backend
    
    - name: Build Docker image
      run: |
        docker build -t aeteknoloji-backend:${{ github.sha }} ./backend
        docker tag aeteknoloji-backend:${{ github.sha }} aeteknoloji-backend:latest
    
    - name: Deploy to production server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        script: |
          cd /var/www/aeteknoloji-production
          git pull origin main
          npm ci --only=production
          docker-compose down
          docker-compose up -d
          echo "Production deployment completed"
    
    - name: Health check
      run: |
        sleep 30
        curl -f http://${{ secrets.PRODUCTION_HOST }}/health || exit 1

  # Notifications
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
    - name: Notify on success
      if: success()
      run: |
        echo "✅ Deployment successful!"
        # Slack/Discord notification here
    
    - name: Notify on failure
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        # Slack/Discord notification here 
